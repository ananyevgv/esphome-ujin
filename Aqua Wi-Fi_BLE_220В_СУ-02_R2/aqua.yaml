substitutions:
  name: ujin-aqua
  device_description: ujin-aqua
  beeper_ledc: GPIO32
  leak_mac: '01:00:5E:00:1D:88'
  leak_mac2: '01:00:5E:00:38:C8'
esphome:
  name: "${name}"
  comment: "${device_description}"
  platformio_options:
    board_upload.maximum_size: 7864320
  on_boot:
    - priority: 600
      then:
        - lambda: |-
            id(rf24_status_code_).publish_state(0);           
        - lambda: |-
            id(rf24_status_code2_).publish_state(0);

api:
  reboot_timeout: 0s     
  
esp32:
  board: denky_d4
  flash_size: 8MB
  framework:
    type: esp-idf
    
#-------------------------------------------
# PSRAM
#-------------------------------------------
psram:
  mode: quad
  speed: 80MHz



#-------------------------------------------
# PACKAGES
#-------------------------------------------
packages:
# обязательные пакеты
  wifi: !include packages/wifi.yaml
  web: !include included/web.yaml
  device_base: !include packages/device_base.yaml

# Сенсорные кнопки
  but: !include 
    file: packages/ujin/button/button_aqua.yaml
    vars:
      one_butt: GPIO15
      two_butt: GPIO2
      touch_threshold: 1150 # 1000 
      delta_threshold: 5
      setup_threshold: false #true

# не обязательные пакеты
# BLE
  ble: !include 
  #  file: packages/ujin/ble/ble.yaml
  #  file: packages/ujin/ble/ble1.yaml
    file: packages/ujin/ble/ble2.yaml
    
# Время NTP
 # time: !include included/time.yaml

# Температура ESP32
  esp32_temp: !include packages/ujin/sensor/esp32_temp.yaml

# Датчик холла
#  esp32_hall: !include packages/ujin/sensor/esp32_hall.yaml
  
# Captive portal
#  cap: !include 
#    file: packages/ujin/captive.yaml
#    vars:
#      ssid_captive: "Lume"
#      pass_captive: "12345678"


# Подсведка кнопок
  led: !include 
    file: packages/ujin/led/led_aqua.yaml
    vars:
      led_lume_pin: GPIO26
      led_lume: 5

#-------------------------------------------
# OUTPUT
#-------------------------------------------      
output:
  - platform: ledc
    pin: $beeper_ledc
    id: rtttl_out

#-------------------------------------------
# RTTTL
#-------------------------------------------
rtttl:
  output: rtttl_out
  gain: 60%

#-------------------------------------------
# SWITCH
#-------------------------------------------
switch:
  - platform: template
    name: "Звук нажатие клавиш"
    optimistic: True
    id: sound
    entity_category: config
    restore_mode: RESTORE_DEFAULT_ON
    icon: mdi:volume-off

  - platform: template
    optimistic: True
    name: "Вода"
    icon: mdi:pipe-valve
    id: valve
    on_turn_on:
      then:
        - if:
            condition:   
              and:
                - binary_sensor.is_off: leak
                - binary_sensor.is_off: leak2
            then:
              - if:
                  condition:
                      switch.is_on: valve_mode
                  then:
                    - switch.turn_off: relay1
                    - switch.turn_on: relay2
                  else:
                    - switch.turn_on: relay1
                    - switch.turn_on: relay2
    on_turn_off:
      then:
        - if:
            condition:
                switch.is_on: valve_mode
            then:
              - switch.turn_on: relay1
              - switch.turn_off: relay2
            else:
              - switch.turn_on: relay1
              - switch.turn_off: relay2

  - platform: template
    name: "Реле 1 или 2"
    optimistic: True
    id: valve_mode

  - platform: gpio
    name: "Реле 1"
    pin: GPIO3
    id: relay1    
    icon: mdi:water-pump-off

  - platform: gpio
    name: "Реле 2"
    pin: GPIO19
    id: relay2      
    icon: mdi:pipe-valve
    
esp32_ble_tracker:
  on_ble_manufacturer_data_advertise:
    - mac_address: $leak_mac
      manufacturer_id: 'ffff'
      then:
        - lambda: |-        
            struct __attribute__((packed)) dataStruct {
            int16_t  initial_two_bytes;
            uint8_t battery_level;
            uint8_t status_code;
            uint8_t counter;
            } myData;            
            memcpy(&myData, &*x.begin(), sizeof(myData)); 
            id(rf24_battery_level_).publish_state(myData.battery_level);
            id(rf24_status_code_).publish_state(myData.status_code);

    - mac_address: $leak_mac2
      manufacturer_id: 'ffff'
      then:
        - lambda: |-        
            struct __attribute__((packed)) dataStruct {
            int16_t  initial_two_bytes;
            uint8_t battery_level;
            uint8_t status_code;
            uint8_t counter;
            } myData2;            
            memcpy(&myData2, &*x.begin(), sizeof(myData2)); 
            id(rf24_battery_level2_).publish_state(myData2.battery_level);
            id(rf24_status_code2_).publish_state(myData2.status_code);

sensor:
  - platform: template
    name: "leak_battery_level"
    id: rf24_battery_level_
    unit_of_measurement: '%'
    accuracy_decimals: 0
    device_class: battery

  - platform: template
    name: "leak_status_code"
    id: rf24_status_code_
    accuracy_decimals: 0

  - platform: template
    name: "leak_battery_level2"
    id: rf24_battery_level2_
    unit_of_measurement: '%'
    accuracy_decimals: 0
    device_class: battery

  - platform: template
    name: "leak_status_code2"
    id: rf24_status_code2_
    accuracy_decimals: 0

  - platform: uptime
    name: "Uptime"

binary_sensor:
  - platform: template
    name: "very long press"
    id: very_long_press_id
    lambda: |-
      int value = id(rf24_status_code_).state;
      return (value >> 6) & 0x01;

  - platform: template
    name: "very long press2"
    id: very_long_press2_id
    lambda: |-
      int value = id(rf24_status_code2_).state;
      return (value >> 6) & 0x01;

  - platform: template
    name: "long press"
    id: long_press_id
    lambda: |-
      int value = id(rf24_status_code_).state;
      return (value >> 5) & 0x01;

  - platform: template
    name: "long press2"
    id: long_press2_id
    lambda: |-
      int value = id(rf24_status_code2_).state;
      return (value >> 5) & 0x01;

  - platform: template
    name: "input"
    id: input_id
    lambda: |-
      int value = id(rf24_status_code_).state;
      return (value >> 2) & 0x01;

  - platform: template
    name: "input2"
    id: input2_id
    lambda: |-
      int value = id(rf24_status_code2_).state;
      return (value >> 2) & 0x01;

  - platform: template
    name: "leak"
    id: leak_id
    lambda: |-
      int value = id(rf24_status_code_).state;
      return (value >> 1) & 0x01;

  - platform: template
    name: "leak2"
    id: leak2_id
    lambda: |-
      int value = id(rf24_status_code2_).state;
      return (value >> 1) & 0x01;

  - platform: template
    name: "press button"
    id: press_button_id
    lambda: |-
      int value = id(rf24_status_code_).state;
      return (value >> 0) & 0x01;

  - platform: template
    name: "press button2"
    id: press_button2_id
    lambda: |-
      int value = id(rf24_status_code2_).state;
      return (value >> 0) & 0x01;

  - platform: template
    name: "Протечка"
    id: leak
    lambda: return (id(rf24_status_code_).state == 2 || id(rf24_status_code_).state == 4 || id(rf24_status_code_).state == 6);
    device_class: MOISTURE
  

  - platform: template
    name: "Протечка2"
    id: leak2
    lambda: return (id(rf24_status_code2_).state == 2 || id(rf24_status_code2_).state == 4 || id(rf24_status_code2_).state == 6);
    device_class: MOISTURE    

